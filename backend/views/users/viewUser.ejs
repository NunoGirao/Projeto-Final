<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin View User</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
</head>
<body class="bg-gray-100 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold text-center text-gray-800 mb-8">User Details</h1>
        
        <div class="bg-white shadow rounded-lg p-6 mb-6">
            <div class="flex items-center mb-4">
                <img id="profilePhoto" class="w-20 h-20 rounded-full object-cover mr-4" src="https://via.placeholder.com/150" alt="Profile Photo">
                <div>
                    <h2 class="text-2xl font-semibold" id="userName"></h2>
                    <p class="text-gray-600" id="userEmail"></p>
                    <p class="text-sm text-gray-500" id="userRole"></p>
                </div>
            </div>
            <div class="grid grid-cols-2 gap-4 mt-4">
                <div class="bg-gray-50 p-3 rounded">
                    <p class="text-sm text-gray-600">User ID</p>
                    <p class="font-semibold" id="userId"></p>
                </div>
                <div class="bg-gray-50 p-3 rounded">
                    <p class="text-sm text-gray-600">Account Created</p>
                    <p class="font-semibold" id="userCreatedAt"></p>
                </div>
            </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div class="bg-white shadow rounded-lg p-6">
                <h2 class="text-xl font-semibold mb-4">Tickets</h2>
                <ul id="userTicketsList" class="space-y-2"></ul>
            </div>
            <div class="bg-white shadow rounded-lg p-6">
                <h2 class="text-xl font-semibold mb-4">NFTs Owned</h2>
                <p class="text-3xl font-bold" id="nftCount"></p>
            </div>
        </div>

        <div class="bg-white shadow rounded-lg p-6 mb-6">
            <h2 class="text-xl font-semibold mb-4">Actions</h2>
            <div class="flex flex-wrap gap-4">
                <button id="editUserButton" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition duration-300 ease-in-out">
                    <i class="fas fa-edit mr-2"></i>Edit User
                </button>
                <button id="resetPasswordButton" class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-4 rounded transition duration-300 ease-in-out">
                    <i class="fas fa-key mr-2"></i>Reset Password
                </button>
                <button id="disableAccountButton" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded transition duration-300 ease-in-out">
                    <i class="fas fa-user-slash mr-2"></i>Disable Account
                </button>
            </div>
        </div>

        <div class="flex justify-center space-x-4">
            <button id="goBack" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded transition duration-300 ease-in-out">
                <i class="fas fa-arrow-left mr-2"></i>Back to Users List
            </button>
            <button id="goToDashboard" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded transition duration-300 ease-in-out">
                <i class="fas fa-tachometer-alt mr-2"></i>Back to Dashboard
            </button>
        </div>
    </div>

    <script src="/js/admin-view-user.js"></script>
</body>
</html>

    <script>
document.addEventListener('DOMContentLoaded', async function() {
    const token = localStorage.getItem('adminToken');
    if (!token) {
        console.error('No admin token found');
        alert('You are not logged in. Redirecting to login page.');
        window.location.href = '/admin';
        return;
    }

    const userId = window.location.pathname.split('/').pop();
    console.log('Fetching details for user ID:', userId);

    try {
        const response = await fetch(`/api/admin/users/${userId}`, {
            method: 'GET',
            headers: {
                'x-access-token': token
            }
        });

        console.log('Response status:', response.status);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('Response not OK. Status:', response.status, 'Error:', errorText);
            throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
        }

        const user = await response.json();
        console.log('User data received:', user);

        // Populate user data
        document.getElementById('userName').textContent = user.name || 'N/A';
        document.getElementById('userEmail').textContent = user.email || 'N/A';
        document.getElementById('userRole').textContent = user.role || 'N/A';
        document.getElementById('userId').textContent = user._id || 'N/A';
        document.getElementById('userCreatedAt').textContent = user.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'N/A';
        
        if (user.profilePhoto) {
            document.getElementById('profilePhoto').src = user.profilePhoto;
        }

        // Render tickets
        const ticketsList = document.getElementById('userTicketsList');
        if (user.tickets && user.tickets.length > 0) {
            user.tickets.forEach(ticket => {
                const li = document.createElement('li');
                li.className = 'bg-gray-50 p-2 rounded flex justify-between items-center';
                li.innerHTML = `
                    <span>${ticket.eventName || 'Unknown Event'}</span>
                    <span class="text-sm text-gray-500">${ticket.purchaseDate ? new Date(ticket.purchaseDate).toLocaleDateString() : 'N/A'}</span>
                `;
                ticketsList.appendChild(li);
            });
        } else {
            ticketsList.innerHTML = '<p class="text-gray-500">No tickets purchased</p>';
        }

        // Render NFTs count
        document.getElementById('nftCount').textContent = user.nftImagesCount || 0;

    } catch (error) {
        console.error('Error fetching user details:', error);
        alert(`Failed to load user details. Error: ${error.message}`);
    }

    // Add event listeners for action buttons
    document.getElementById('editUserButton').addEventListener('click', () => {
        window.location.href = `/admin/users/edit/${userId}`;
    });

    document.getElementById('resetPasswordButton').addEventListener('click', async () => {
        if (confirm('Are you sure you want to reset the user\'s password?')) {
            // Implement password reset logic here
            alert('Password reset functionality to be implemented');
        }
    });

    document.getElementById('disableAccountButton').addEventListener('click', async () => {
        if (confirm('Are you sure you want to disable this user account?')) {
            // Implement account disable logic here
            alert('Account disable functionality to be implemented');
        }
    });

    document.getElementById('goBack').addEventListener('click', () => window.location.href = '/admin/users');
    document.getElementById('goToDashboard').addEventListener('click', () => window.location.href = '/admin/dashboard');
});
</script>
</body>
</html>